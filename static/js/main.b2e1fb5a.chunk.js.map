{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","cardRobots","map","robot","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","err","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","robots","fetch","then","response","json","users","filteredRobots","filter","valRobots","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACxB,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,mBACrB,gCACC,6BAAKC,IACL,4BAAIC,WCeOI,EApBE,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAInB,OACC,8BAEGA,EAAWC,KAAI,SAAAC,GAChB,OAAO,cAAC,EAAD,CAEPT,GAAIS,EAAMT,GACVC,KAAMQ,EAAMR,KACZC,MAAOO,EAAMP,OAHRO,EAAMT,UCGAU,G,KAZG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,qBAAKR,UAAU,MAAf,SACC,uBAAOA,UAAU,sCACjBS,KAAK,SACLC,YAAY,gBACZC,SAAUH,QCCEI,EARA,SAACC,GACf,OACC,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SACEJ,EAAMK,YCkBKC,E,kDApBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAKC,GACtBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACN,iDAEAG,KAAKX,MAAMK,a,GAhBOQ,aC2DbC,G,wDAnDd,aAAe,IAAD,8BACb,gBAmBDC,eAAiB,SAACC,GAEjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAnB1C,EAAKZ,MAAQ,CAEZa,OAAQ,GAERH,YAAa,IAPD,E,gEAYO,IAAD,OAEnBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAAEQ,OAAQK,S,+BAU/B,MAEwBd,KAAKJ,MAA7Ba,EAFA,EAEAA,OAAQH,EAFR,EAEQA,YAEVS,EAAiBN,EAAOO,QAAO,SAAAC,GACpC,OAAOA,EAAU3C,KAAK4C,cAAcC,SAASb,EAAYY,kBAI1D,OAAQT,EAAOW,OAIf,sBAAK5C,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWQ,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAUxB,WAAYmC,WAPzB,oBAAIvC,UAAU,KAAd,yB,GAtCgB0B,cCGHmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b2e1fb5a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n\treturn (\r\n\t\t<div className='bg-light-green tc dib br3 pa2 ma3 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ cardRobots }) => {\r\n\t// if (true) {\r\n\t// \tthrow new Error('Noo Noo');\r\n\t// }\r\n\treturn (\r\n\t\t<div>\r\n\t  \t{\r\n\t  \t\tcardRobots.map(robot => {\r\n\t\t\t\treturn <Card\r\n\t\t\t\tkey={robot.id}\r\n\t\t\t\tid={robot.id}\r\n\t\t\t\tname={robot.name}\r\n\t\t\t\temail={robot.email}\r\n\t\t\t\t/>\r\n\t\t\t})\r\n\t  \t}\r\n\t \t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 tc ba b--green bg-lightest-blue'\r\n\t\t\ttype='search'\r\n\t\t\tplaceholder='Search Robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '4px solid white', height: '800px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(err, info) {\r\n\t\tthis.setState({ hasError: true });\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1>Oops. Not good.</h1>\r\n\t\t} else {\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import {arrRobots} from '../robots';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\t// State to make smart components\r\n\t\tthis.state = {\r\n\t\t\t// type of state robots will be array with no value\r\n\t\t\trobots: [],\r\n\t\t\t// type of state searchField will be string with the value of null\r\n\t\t\tsearchField: ''\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tcomponentDidMount() {\r\n\t\t// fetching values on https://jsonplaceholder.typicode.com/users then turn it into json and then put its value into state robots\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({ robots: users}));\r\n\t}\r\n\r\n\r\n\tonSearchChange = (event) => {\r\n\t\t// reads changes on onSearchChange's value and insert its value into state searchField\r\n\t\tthis.setState({ searchField: event.target.value });\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\t// destructuring robots & searchField from this.state\r\n\t\tconst { robots, searchField } = this.state;\r\n\t\t// filtering robots by value on searchField. Everything turns into lowercase\r\n\t\tconst filteredRobots = robots.filter(valRobots => {\r\n\t\t\treturn valRobots.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t});\r\n\r\n\t\t// Tertary CF. f robots length equals zero\r\n\t\treturn !robots.length ?\r\n\t\t// true condition\r\n\t\t<h1 className='tc'>Loading</h1> :\r\n\t\t// false condition\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CardList cardRobots={filteredRobots}/>\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t}\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}